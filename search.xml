<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022</title>
      <link href="2022/02/28/2022/"/>
      <url>2022/02/28/2022/</url>
      
        <content type="html"><![CDATA[<h2 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h2><ul><li>多读书</li><li>写博客</li><li>要快乐</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 kubeadm 创建 k8s 集群</title>
      <link href="2021/04/25/create-k8s-cluster-with-kubeadm/"/>
      <url>2021/04/25/create-k8s-cluster-with-kubeadm/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统: Centos7</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>关闭swap</li><li>关闭selinux</li><li>确保br_netfilter 内核载入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">手动载入:</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">永久生效:</span><br><span class="line">cat &lt;&lt;EOF | tee &#x2F;etc&#x2F;modules-load.d&#x2F;k8s.conf </span><br><span class="line">br_netfilter </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | tee &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf </span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1 </span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装-k8s-组件"><a href="#安装-k8s-组件" class="headerlink" title="安装 k8s 组件"></a>安装 k8s 组件</h2><p>kubeadm, kubelet所有节点必须安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | tee &#x2F;etc&#x2F;yum.repos.d&#x2F;k8s.repo</span><br><span class="line">[k8s]</span><br><span class="line">name&#x3D;k8s repo</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line">systemctl enable --now kubelet</span><br></pre></td></tr></table></figure><h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><p>可以用阿里云的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-19.03.15 docker-ce-cli-19.03-15</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;docker </span><br><span class="line">cat &lt;&lt;EOF | tee &#x2F;etc&#x2F;docker&#x2F;daemon.json </span><br><span class="line">&#123;   </span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],   </span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,   </span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">      &quot;max-size&quot;: &quot;100m&quot;   </span><br><span class="line">    &#125;,   </span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot; </span><br><span class="line">&#125; </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl enable docker </span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="准备-kubeadm-配置"><a href="#准备-kubeadm-配置" class="headerlink" title="准备 kubeadm 配置"></a>准备 kubeadm 配置</h2><p>生产默认初始配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config print  init-defaults</span><br></pre></td></tr></table></figure><p>配置文件示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.2.231</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: &#x2F;var&#x2F;run&#x2F;dockershim.sock</span><br><span class="line">  name: test1</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io&#x2F;master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta2</span><br><span class="line">certificatesDir: &#x2F;etc&#x2F;kubernetes&#x2F;pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  type: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    dataDir: &#x2F;var&#x2F;lib&#x2F;etcd</span><br><span class="line">imageRepository: registry.aliyuncs.com&#x2F;google_containers</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.20.0</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: demo.com</span><br><span class="line">  podSubnet: 10.244.0.0&#x2F;16</span><br><span class="line">  serviceSubnet: 10.96.0.0&#x2F;12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io&#x2F;v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs</span><br><span class="line">---</span><br><span class="line">apiVersion: kubelet.config.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">cgroupDriver: systemd</span><br></pre></td></tr></table></figure><h2 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h2><p>master节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config&#x3D;kubeadm_config</span><br></pre></td></tr></table></figure><p>node节点，参考<code>kubeadm init</code>的输出</p><p>添加network addon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;master&#x2F;Documentation&#x2F;kube-flannel.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> k8s kubernets docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logging</title>
      <link href="2021/02/24/logging/"/>
      <url>2021/02/24/logging/</url>
      
        <content type="html"><![CDATA[<h2 id="日志的作用"><a href="#日志的作用" class="headerlink" title="日志的作用"></a>日志的作用</h2><ul><li>调试</li><li>用户行为审计</li></ul><h2 id="Logging模块"><a href="#Logging模块" class="headerlink" title="Logging模块"></a>Logging模块</h2><p>Python的日志功能由Logging模块提供。</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>简单例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.warning(&#39;Watch out!&#39;)  # will print a message to the console</span><br><span class="line">logging.info(&#39;I told you so&#39;)  # 不会输出，因为默认的日志级别是&#96;WARNING&#96;</span><br></pre></td></tr></table></figure><p>输出的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING:root:Watch out!</span><br></pre></td></tr></table></figure><p>打日志到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(filename&#x3D;&#39;example.log&#39;,level&#x3D;logging.DEBUG)</span><br><span class="line">logging.debug(&#39;This message should go to the log file&#39;)</span><br><span class="line">logging.info(&#39;So should this&#39;)</span><br><span class="line">logging.warning(&#39;And this, too&#39;)</span><br></pre></td></tr></table></figure><p>输出内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:This message should go to the log file</span><br><span class="line">INFO:root:So should this</span><br><span class="line">WARNING:root:And this, too</span><br></pre></td></tr></table></figure><p>日志的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging.basicConfig(filename&#x3D;&#39;example.log&#39;, level&#x3D;logging.DEBUG)</span><br><span class="line"># 输出日志到文件，且日志级别为DEBUG(DEBUG级别以上的日志都会输出)</span><br></pre></td></tr></table></figure><p>更多配置参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">filename  Specifies that a FileHandler be created, using the specified</span><br><span class="line">          filename, rather than a StreamHandler.</span><br><span class="line">filemode  Specifies the mode to open the file, if filename is specified</span><br><span class="line">          (if filemode is unspecified, it defaults to &#39;a&#39;).</span><br><span class="line">format    Use the specified format string for the handler.</span><br><span class="line">datefmt   Use the specified date&#x2F;time format.</span><br><span class="line">style     If a format string is specified, use this to specify the</span><br><span class="line">          type of format string (possible values &#39;%&#39;, &#39;&#123;&#39;, &#39;$&#39;, for</span><br><span class="line">          %-formatting, :meth:&#96;str.format&#96; and :class:&#96;string.Template&#96;</span><br><span class="line">          - defaults to &#39;%&#39;).</span><br><span class="line">level     Set the root logger level to the specified level.</span><br><span class="line">stream    Use the specified stream to initialize the StreamHandler. Note</span><br><span class="line">          that this argument is incompatible with &#39;filename&#39; - if both</span><br><span class="line">          are present, &#39;stream&#39; is ignored.</span><br><span class="line">handlers  If specified, this should be an iterable of already created</span><br><span class="line">          handlers, which will be added to the root handler. Any handler</span><br><span class="line">          in the list which does not have a formatter assigned will be</span><br><span class="line">          assigned the formatter created in this function.</span><br><span class="line">force     If this keyword  is specified as true, any existing handlers</span><br><span class="line">          attached to the root logger are removed and closed, before</span><br><span class="line">          carrying out the configuration as specified by the other</span><br><span class="line">          arguments.</span><br><span class="line">encoding  If specified together with a filename, this encoding is passed to</span><br><span class="line">          the created FileHandler, causing it to be used when the file is</span><br><span class="line">          opened.</span><br><span class="line">errors    If specified together with a filename, this value is passed to the</span><br><span class="line">          created FileHandler, causing it to be used when the file is</span><br><span class="line">          opened in text mode. If not specified, the default value is</span><br><span class="line">          &#96;backslashreplace&#96;.</span><br></pre></td></tr></table></figure><h3 id="深入一点"><a href="#深入一点" class="headerlink" title="深入一点"></a>深入一点</h3><p>Logging 模块采用了模块化实现，包含4个主要的组件</p><ul><li>Logger 代码使用日志功能的入口</li><li>Handler　将日志发送给合适的日志处理器，比如文件，Socket，终端等</li><li>Filter 日志过滤</li><li>Formatter 日志格式</li></ul><p>Logging模块支持3种配置方式</p><ul><li>直接通过代码创建loggers, handlers 和 formatter</li><li>使用<code>fileConfig()</code>从配置文件中读取</li><li>使用<code>dictConfig()</code>从一个配置字段中读取</li></ul><p>这里演示通过代码方式创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># create logger</span><br><span class="line">logger &#x3D; logging.getLogger(&#39;simple_example&#39;)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"># create console handler and set level to debug</span><br><span class="line">ch &#x3D; logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"># create formatter</span><br><span class="line">formatter &#x3D; logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)</span><br><span class="line"></span><br><span class="line"># add formatter to ch</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"># add ch to logger</span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"># &#39;application&#39; code</span><br><span class="line">logger.debug(&#39;debug message&#39;)</span><br><span class="line">logger.info(&#39;info message&#39;)</span><br><span class="line">logger.warn(&#39;warn message&#39;)</span><br><span class="line">logger.error(&#39;error message&#39;)</span><br><span class="line">logger.critical(&#39;critical message&#39;)</span><br></pre></td></tr></table></figure><h2 id="Django中Logging的使用"><a href="#Django中Logging的使用" class="headerlink" title="Django中Logging的使用"></a>Django中Logging的使用</h2><p>Django中日志配置(配置字典方式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">LOGGING &#x3D; &#123;</span><br><span class="line">    &#39;version&#39;: 1,</span><br><span class="line">    &#39;disable_existing_loggers&#39;: False,</span><br><span class="line">    &#39;formatters&#39;: &#123;</span><br><span class="line">        &#39;verbose&#39;: &#123;</span><br><span class="line">            &#39;format&#39;: &#39;%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;simple&#39;: &#123;</span><br><span class="line">            &#39;format&#39;: &#39;%(levelname)s %(message)s&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;handlers&#39;: &#123;</span><br><span class="line">        &#39;django_handler&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;INFO&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.handlers.TimedRotatingFileHandler&#39;, # 这里配置了日志滚动</span><br><span class="line">            &#39;filename&#39;: &#39;error.log&#39;,</span><br><span class="line">            &#39;when&#39;: &#39;midnight&#39;,</span><br><span class="line">            &#39;interval&#39;: 1,</span><br><span class="line">            &#39;backupCount&#39;: 10,</span><br><span class="line">            &#39;formatter&#39;: &#39;verbose&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;task_handler&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;INFO&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.FileHandler&#39;,</span><br><span class="line">            &#39;filename&#39;: &#39;info.log&#39;,</span><br><span class="line">            &#39;formatter&#39;: &#39;verbose&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;loggers&#39;: &#123;</span><br><span class="line">        &#39;django&#39;: &#123; # Django中的默认logger</span><br><span class="line">            &#39;handlers&#39;: [&#39;django_handler&#39;],</span><br><span class="line">            &#39;propagate&#39;: True,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;task&#39;: &#123;</span><br><span class="line">            &#39;handlers&#39;: [&#39;task_handler&#39;],</span><br><span class="line">            &#39;propagate&#39;: True,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码中调用日志模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">imporg logging</span><br><span class="line"></span><br><span class="line">logger &#x3D; logging.getLogger(&#39;task&#39;)</span><br><span class="line">logger.info(&quot;task started.&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.python.org/3.6/howto/logging.html#logging-basic-tutorial">logging-basic-tutorial</a><br><a href="https://docs.python-guide.org/writing/logging/">Guide to Python - Logging</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devops roadmap</title>
      <link href="2021/02/03/devops-roadmap/"/>
      <url>2021/02/03/devops-roadmap/</url>
      
        <content type="html"><![CDATA[<img src="/2021/02/03/devops-roadmap/devops.png" class=""><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href="https://roadmap.sh/devops">https://roadmap.sh/devops</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celery routing tasks</title>
      <link href="2020/11/20/Celery-routing-task/"/>
      <url>2020/11/20/Celery-routing-task/</url>
      
        <content type="html"><![CDATA[<h2 id="Celery简介"><a href="#Celery简介" class="headerlink" title="Celery简介"></a>Celery简介</h2><p>Celery是一个简单的，灵活的，可靠的分布式异步任务系统。Celery通过消息列队进行任务调度，支持的broker有rabbitmq、redis等。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Celery</span><br></pre></td></tr></table></figure><h3 id="集成到Django"><a href="#集成到Django" class="headerlink" title="集成到Django"></a>集成到Django</h3><p>项目目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── config</span><br><span class="line">│   ├── celery.py</span><br><span class="line">│   ├── environment.py</span><br><span class="line">│   ├── environment.pyc</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __init__.pyc</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   ├── settings</span><br><span class="line">|   |   ├── base.py</span><br><span class="line">|   |   ├── __init__.py</span><br><span class="line">|   |   ├── local.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── manage.py</span><br><span class="line">├── migrations</span><br><span class="line">│   └── __init__.py</span><br><span class="line">├── README.md</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在config目录下添加celery.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">from .environment import SETTINGS_MODULE</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, SETTINGS_MODULE)</span><br><span class="line"></span><br><span class="line"># 初始化Celery实例</span><br><span class="line">app &#x3D; Celery(&#39;tasks&#39;)</span><br><span class="line"></span><br><span class="line"># 定义Celery配置方式,此处采用和Django配置集成的方式</span><br><span class="line">app.config_from_object(&#39;django.conf:settings&#39;, namespace&#x3D;&#39;CELERY&#39;)</span><br><span class="line"></span><br><span class="line"># 自动发现任务,每个app下tasks.py中定义的任务将会自动发现</span><br><span class="line">app.autodiscover_tasks()</span><br><span class="line"></span><br><span class="line"># 定义任务</span><br><span class="line">@app.task()</span><br><span class="line">def demo_task1():</span><br><span class="line">    print(&#39;demo_task1 started!&#39;)</span><br><span class="line">    time.sleep(1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.task()</span><br><span class="line">def demo_task2():</span><br><span class="line">    print(&#39;demo_task2 started!&#39;)</span><br><span class="line">    time.sleep(10)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加配置config/settings/local.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CELERY_BROKER_URL &#x3D; &#39;redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;7&#39;</span><br><span class="line">CELERY_ACCEPT_CONTENT &#x3D; [&#39;json&#39;]</span><br><span class="line">CELERY_RESULT_BACKEND &#x3D; &#39;redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;6&#39;</span><br><span class="line">CELERY_TASK_SERIALIZER &#x3D; &#39;json&#39;</span><br><span class="line">CELERY_MAX_TASKS_PER_CHILD &#x3D; 10</span><br></pre></td></tr></table></figure><h3 id="启动Celery-worker"><a href="#启动Celery-worker" class="headerlink" title="启动Celery worker"></a>启动Celery worker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A config worker --concurrency&#x3D;2 -l info</span><br></pre></td></tr></table></figure><blockquote><p><code>--concurrency</code>指定任务的并发数量，不指定自动设置为cpu的核数</p></blockquote><h3 id="调用异步任务"><a href="#调用异步任务" class="headerlink" title="调用异步任务"></a>调用异步任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from config.celery import demo_task1, demo_task2</span><br><span class="line"></span><br><span class="line">demo_task1.delay()</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>以上的基础配置可以满足大部分的使用场景，但随着使用，遇到了以下问题：</p><p>我的异步任务中有一类是占用计算资源比较多的(如构建)，这些任务需要根据服务器性能设置并发限制。另一类任务没有多少计算量，多数时间在等待IO。</p><p>默认情况下，Celery在同一个队列中运行所有任务，高计算量的任务和IO型任务对并发的限制需求是不同的，如构建任务在4核机器上并发跑4个就比较极限了,但其它一些IO型任务在4核机器上并发100也没有问题，为了保证服务稳定，只能将任务并发设置为4。但其实IO型任务可以并发更多。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>Celery的<a href="https://docs.celeryproject.org/en/stable/userguide/routing.html">route特性</a>可以解决此问题。通过启动多个worker指定不同的队列和并发限制，实现任务的分类执行。</p><p>增加Celery配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CELERY_TASK_ROUTES &#x3D; &#123;</span><br><span class="line">    &#39;config.celery.demo_task1&#39;: &#123;&#39;queue&#39;: &#39;io_q&#39;&#125;,</span><br><span class="line">    &#39;config.celery.demo_task2&#39;: &#123;&#39;queue&#39;: &#39;cpu_q&#39;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以在配置中指定任务的队列，可以在程序中调用任务时指定队列。</p></blockquote><p>启动多个worker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">celery -A config worker -Q io_q -l info --concurrency&#x3D;100 -n w1@127.0.0.1</span><br><span class="line">celery -A config worker -Q cpu_q -l info --concurrency&#x3D;4 -n w2@127.0.0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Celery </tag>
            
            <tag> Routing Tasks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录_20200418</title>
      <link href="2020/04/18/changes-20200418/"/>
      <url>2020/04/18/changes-20200418/</url>
      
        <content type="html"><![CDATA[<h2 id="戒烟"><a href="#戒烟" class="headerlink" title="戒烟"></a>戒烟</h2><p>2019年4月21日，站在出租屋楼道里抽了最后一根烟。我想那是我改变的一个“起点”，重要的不仅是我戒了烟，更有价值的是我的脑子里的一个观念发芽了（也有人叫元思维能力），那就是“很多事情没有做到，不是因为它有多么困难，真正做不到，而是方法没有用对方法，是脑子（其实是思维）的问题。</p><p>细说一下抽烟。真正抽烟的原因我想是“可以缓解压力和紧张”，这些所谓的压力和紧张，有一部分来自物理世界(工作、生活和情感等)，另一部分却来自抽烟本身(尼古丁的戒断反应)造成的压力，一支烟可以在几秒钟内缓解你的戒断反应，让你觉得压力减少了，可减少的这部分“压力”只是尼古丁的戒断反应造成的那部分“压力”，你会觉得确实抽烟可以缓解压力，但真正的物理压力仍然在那里。</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>上文中关于抽烟的观点来自于亚伦·卡尔的《这书能让你戒烟》，这次经历真正让我从阅读中直接受益。同时，关注到一些技术博主，如<a href="https://coolshell.cn/">陈浩</a>，<a href="http://mindhacks.cn/">刘未鹏</a>，它们的思考和经历使我重新审视了自己。我的思维不再“闭关锁国”，开始真正乐意接受输入，而这其中最主要的途径就是阅读，期间读了如《把时间当作朋友》，《自控力》，《非暴力沟通》，《暗时间》。</p><h2 id="注意力的把控"><a href="#注意力的把控" class="headerlink" title="注意力的把控"></a>注意力的把控</h2><p>想读的书多了，想做的事多了，好像时间不太够用。开始思考时间的利用。李笑来的《把时间当作朋友》中认为，我们无法管理时间，但我们可以选择把时间花在什么事情上，争取让更多的时间为我所用。</p><p>最近，我陆陆续续卸载了微博，知乎，关闭了微信朋友圈，好像效果不错，手机的电量可明显说明问题。多出来的时间就可以读书，学习。</p><h2 id="对工作的态度转变"><a href="#对工作的态度转变" class="headerlink" title="对工作的态度转变"></a>对工作的态度转变</h2><p>以前对工作更多的是焦虑和吐槽，最近开始思考如何更好的发展，并真正在采取一些行动。比如基础知识的学习，知识结构的梳理，及技术之外的能力提升等。而且不再把“钱“看的那么重了，更注重时间成本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正确定义问题</title>
      <link href="2020/03/22/define-problems-correctly/"/>
      <url>2020/03/22/define-problems-correctly/</url>
      
        <content type="html"><![CDATA[<h2 id="澄清问题"><a href="#澄清问题" class="headerlink" title="澄清问题"></a>澄清问题</h2><blockquote><p>爱因斯坦说过：“如果给我一个小时解答一道决定我生死的问题，我会花55分钟来弄清楚这道题到底在说什么。一旦清楚了它到底在问什么，剩下的5分钟足够解答这个问题”</p></blockquote><p>花时间澄清真正的问题，以及知道哪些问题应该被解决是非常重要的。</p><h3 id="找到真正的问题"><a href="#找到真正的问题" class="headerlink" title="找到真正的问题"></a>找到真正的问题</h3><p>工程师或者程序员的工作，是结果导向型工作，相对过程导向型工作，需要的是功劳，而不是苦恼。如果想要产出更多的价值，除了花时间以外，还有两种方法，一种是做更高价值的事，另一种则是把事情做的更快。</p><p>找到高价值的事，就是找到真正需要解决的问题，要注意以下两点:</p><ol><li>不是所有的问题都是真正的问题；</li><li>不是所有真正的问题都值得被解决。</li></ol><p><strong>不是所有问题都是真正的问题</strong><br>表象问题与真正的问题之间有很大的距离，造成这种情况的原因是三种偏差。</p><ul><li>理解偏差，常出现在别人需要你解决问题时，通过提问澄清</li><li>隐藏偏差，常出现在与他人产生冲突的时候，这种情况下，不要急于解决表面问题，而是去挖掘别人内心的真正需求。理解表层需求、利益出发点和真正需求之间的关系。</li><li>成因偏差，常出现在解决商业性问题的时候，需要搞清楚成因，解决根本问题。</li></ul><p><strong>不是所有真正的问题都值得被解决</strong><br>这个世界上大部分的问题都无法解决。我们可以通过解决度和关键度来区分不同的问题。</p><ul><li>关键度：当下解决的这个问题有多重要</li><li>解决度：当下这个问题可解决的程度如何</li></ul><p>根据关键度和解决的可以把问题分为4类：</p><ol><li>解决度高、关键度低-小插曲:很容易对付，如果花时间少，就迅速解决，如果花时间多，授权别人去做</li><li>解决度低、关键度低-困难游戏：设定时限，时限内可以解决就做，时限内肯定无法解决的，就不要开始，趁早放弃</li><li>解决度低、关键度高-无底洞：这是很多人容易陷入的无底洞，对于这类问题，倒不如调用情绪脑，听从内心的直觉，而不是陷入理性分析中无法自拔</li><li>解决度高、关键度高-高价值陷阱：这类问题是我们需要花时间的地方，花时间解决可以产出结果、价值又高的事情。但是要注意不要漫无目的的反复思量，而不行动，所以要思考，而不是困扰。</li></ol><h2 id="提升高价值问题的占比"><a href="#提升高价值问题的占比" class="headerlink" title="提升高价值问题的占比"></a>提升高价值问题的占比</h2><p>并不是一上来就可以有机会把所有时间拿去解决高价值的问题，这很正常。但随着职业的发展，工作经验的增长，一定要不断反思问题，从而找到真正高价值的问题，最后将自己更大比例的时间分配在解决高价值问题上面。</p><h2 id="如何快速找到有价值的问题"><a href="#如何快速找到有价值的问题" class="headerlink" title="如何快速找到有价值的问题"></a>如何快速找到有价值的问题</h2><p>找到高价值问题方法-问题清单</p><ol><li>澄清需求，我是否清楚该问题/任务的背景、目的、关键利益方、可用资源和时间要求？</li><li>挖掘诉求，对方为什么会提出这样的问题/挑战？他的真正诉求是什么？这个诉求还可以通过什么方式实现？我可以怎么帮助他实现？</li><li>找准问题，这个问题解决了，事情就会都顺利了？我解决的是知识表象问题、还是真正成因？</li><li>确定关键，这个问题是否必须被解决？是否有其他更加重要的问题需要我去花时间？</li><li>确定可行，这个问题是否可以被解决？我解决这个问题大概需要多久？这个时间是否可以接受？</li><li>正确思考，这个问题我思量多久了？有没有进展？继续如此，是否有可能找到答案？</li></ol><p>不是所有问题都是真正的问题，不是所有真正的问题都值得被解决。</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>以上内容来源于《请停止无效努力》一书。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/02/03/hello-world/"/>
      <url>2020/02/03/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
